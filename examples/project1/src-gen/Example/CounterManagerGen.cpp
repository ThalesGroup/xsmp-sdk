// Copyright 2023 YOUR ORGANIZATION. All rights reserved.
// 
// YOUR NOTICE

// -----------------------------------------------------------------------------
// File Name    : CounterManagerGen.cpp
// Generated by : XsmpSdkGenerator-${qualifiedVersion}
// -----------------------------------------------------------------------------
/// @file Example/CounterManagerGen.cpp
// This file is auto-generated, Do not edit otherwise your changes will be lost

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include <Example/CounterManager.h>
#include <Smp/IPublication.h>
#include <Xsmp/ComponentHelper.h>
#include <Xsmp/Request.h>

namespace Example {
//--------------------------- Constructor -------------------------
CounterManagerGen::CounterManagerGen(::Smp::String8 name,
        ::Smp::String8 description, ::Smp::IComposite *parent,
        ::Smp::ISimulator *simulator) :
        // Base class initialization
        ::Xsmp::Model(name, description, parent, simulator),
        // Container: counters
        counters { "counters", "list of handled counters", this, 0, -1 } {
}

void CounterManagerGen::Publish(::Smp::IPublication *receiver) {
    // Call parent class implementation first
    ::Xsmp::Model::Publish(receiver);

    // Publish Property sum
    receiver->PublishProperty("sum", "sum of all contained counters",
            ::Smp::Uuids::Uuid_Int32, ::Smp::AccessKind::AK_ReadOnly,
            ::Smp::ViewKind::VK_None);
    // Publish Property average
    receiver->PublishProperty("average", "average of all contained counters",
            ::Smp::Uuids::Uuid_Float64, ::Smp::AccessKind::AK_ReadOnly,
            ::Smp::ViewKind::VK_None);
    // Publish Property count
    receiver->PublishProperty("count", "set all counter value",
            ::Smp::Uuids::Uuid_Int32, ::Smp::AccessKind::AK_WriteOnly,
            ::Smp::ViewKind::VK_None);
    // Call user DoPublish if any
    ::Xsmp::Component::Helper::Publish < ::Example::CounterManager
            > (this, receiver);
}

void CounterManagerGen::Configure(::Smp::Services::ILogger *logger,
        ::Smp::Services::ILinkRegistry *linkRegistry) {
    // Call parent implementation first
    ::Xsmp::Model::Configure(logger, linkRegistry);

    // Call user DoConfigure if any
    ::Xsmp::Component::Helper::Configure < ::Example::CounterManager
            > (this, logger, linkRegistry);
}

void CounterManagerGen::Connect(::Smp::ISimulator *simulator) {
    // Call parent implementation first
    ::Xsmp::Model::Connect(simulator);

    // Call user DoConnect if any
    ::Xsmp::Component::Helper::Connect < ::Example::CounterManager
            > (this, simulator);
}

void CounterManagerGen::Disconnect() {
    // Call user DoDisconnect if any
    ::Xsmp::Component::Helper::Disconnect < ::Example::CounterManager > (this);

    // Call parent implementation last, to remove references to the Simulator and its services
    ::Xsmp::Model::Disconnect();
}

CounterManagerGen::RequestHandlers CounterManagerGen::requestHandlers =
        InitRequestHandlers();

CounterManagerGen::RequestHandlers CounterManagerGen::InitRequestHandlers() {
    RequestHandlers handlers;
    if (handlers.find("get_sum") == handlers.end()) {
        handlers["get_sum"] = [](CounterManagerGen *component,
                ::Smp::IRequest *request) {
            /// Invoke get_sum
            ::Xsmp::Request::setReturnValue(request,
                    ::Smp::PrimitiveTypeKind::PTK_Int32, component->get_sum());
        };
    }
    if (handlers.find("get_average") == handlers.end()) {
        handlers["get_average"] = [](CounterManagerGen *component,
                ::Smp::IRequest *request) {
            /// Invoke get_average
            ::Xsmp::Request::setReturnValue(request,
                    ::Smp::PrimitiveTypeKind::PTK_Float64,
                    component->get_average());
        };
    }
    if (handlers.find("set_count") == handlers.end()) {
        handlers["set_count"] =
                [](CounterManagerGen *component, ::Smp::IRequest *request) {
                    /// Invoke set_count
                    component->set_count(
                            ::Xsmp::Request::get < ::Smp::Int32
                                    > (component, request, "count", ::Smp::PrimitiveTypeKind::PTK_Int32));
                };
    }
    return handlers;
}

void CounterManagerGen::Invoke(::Smp::IRequest *request) {
    if (request == nullptr) {
        return;
    }
    auto handler = requestHandlers.find(request->GetOperationName());
    if (handler != requestHandlers.end()) {
        handler->second(this, request);
    } else {
        // pass the request down to the base model
        ::Xsmp::Model::Invoke(request);
    }
}

const Smp::Uuid& CounterManagerGen::GetUuid() const {
    return Uuid_CounterManager;
}
} // namespace Example
