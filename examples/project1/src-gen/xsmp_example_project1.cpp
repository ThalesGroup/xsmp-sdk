// Copyright 2023-2024 YOUR ORGANIZATION. All rights reserved.
//
// YOUR NOTICE
// -----------------------------------------------------------------------------
// File Name    : xsmp_example_project1.cpp
// Generated by : XsmpSdkGenerator-1.1.2
// -----------------------------------------------------------------------------
/// @file xsmp_example_project1.cpp
// This file is auto-generated, Do not edit otherwise your changes will be lost

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include <Example/Counter.h>
#include <Example/CounterManager.h>
#include <Xsmp/Factory.h>
#include <unordered_set>
#include <xsmp_example_project1.h>

// ----------------------------------------------------------------------------------
// ----------------------------- Global variables ------------------------------
// ----------------------------------------------------------------------------------

namespace {
/// Simulators set.
std::unordered_set<::Smp::ISimulator *> simulators{};
} // namespace

// --------------------------------------------------------------------------------
// --------------------------- Initialise Function -----------------------------
// --------------------------------------------------------------------------------

extern "C" {
/// Initialise Package xsmp_example_project1.
/// @param simulator Simulator for registration of factories.
/// @param typeRegistry Type Registry for registration of types.
/// @return True if initialisation was successful, false otherwise.
bool Initialise_xsmp_example_project1(
    ::Smp::ISimulator *simulator,
    [[maybe_unused]] ::Smp::Publication::ITypeRegistry *typeRegistry) {
  // check simulator validity
  if (!simulator) {
    return false;
  }
  // avoid double initialisation
  if (!::simulators.emplace(simulator).second) {
    return true;
  }

  // Register factory for Model Counter
  simulator->RegisterFactory(::Xsmp::Factory::Create<::Example::Counter>(
      "Counter",              // name
      "",                     // description
      simulator,              // simulator
      ::Example::Uuid_Counter // UUID
      ));
  // Register factory for Model CounterManager
  simulator->RegisterFactory(::Xsmp::Factory::Create<::Example::CounterManager>(
      "CounterManager",              // name
      "",                            // description
      simulator,                     // simulator
      ::Example::Uuid_CounterManager // UUID
      ));

  return true;
}
}

// ---------------------------------------------------------------------------------
// ---------------------------- Finalise Function ------------------------------
// ---------------------------------------------------------------------------------

extern "C" {
/// Finalise Package xsmp_example_project1.
/// @param simulator Simulator.
/// @return True if finalisation was successful, false otherwise.
bool Finalise_xsmp_example_project1(::Smp::ISimulator *simulator) {
  // backward compatibility
  if (!simulator) {
    ::simulators.clear();
  }
  // avoid double finalisation
  else if (!::simulators.erase(simulator)) {
    return true;
  }

  return true;
}
}
