// Copyright 2023-2024 THALES ALENIA SPACE FRANCE. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------
// File Name    : ModelWithEventsGen.h
// Generated by : XsmpSdkGenerator-1.1.0
// -----------------------------------------------------------------------------
/// @file Xsmp/Tests/ModelWithEventsGen.h
// This file is auto-generated, Do not edit otherwise your changes will be lost

#ifndef XSMP_TESTS_MODELWITHEVENTSGEN_H_
#define XSMP_TESTS_MODELWITHEVENTSGEN_H_

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include <Smp/ISimulator.h>
#include <Smp/PrimitiveTypes.h>
#include <Smp/Publication/ITypeRegistry.h>
#include <Xsmp/EventConsumer.h>
#include <Xsmp/EventProvider.h>
#include <Xsmp/EventSink.h>
#include <Xsmp/EventSource.h>
#include <Xsmp/Model.h>
#include <type_traits>

// ----------------------------------------------------------------------------
// ------------------------ Types and Interfaces ------------------------
// ----------------------------------------------------------------------------

namespace Xsmp::Tests {
// forward declaration of user class
class ModelWithEvents;
/// Universally unique identifier of type ModelWithEvents.
static constexpr ::Smp::Uuid Uuid_ModelWithEvents{0xbc8e7b0eU, 0xb820U, 0x4404U,
                                                  0xa397U, 0x9e8df27bb93cU};

class ModelWithEventsGen : public ::Xsmp::Model,
                           public virtual ::Xsmp::EventProvider,
                           public virtual ::Xsmp::EventConsumer {

  friend class ::Xsmp::Tests::ModelWithEvents;

public:
  // ------------------------------------------------------------------------------------
  // -------------------------- Constructors/Destructor
  // --------------------------
  // ------------------------------------------------------------------------------------

  /// Constructor setting name, description, parent and simulator.
  /// @param name Name of new model instance.
  /// @param description Description of new model instance.
  /// @param parent Parent of new model instance.
  /// @param simulator The simulator instance.
  ModelWithEventsGen(::Smp::String8 name, ::Smp::String8 description,
                     ::Smp::IComposite *parent, ::Smp::ISimulator *simulator);
  /// deleted copy constructor
  ModelWithEventsGen(const ModelWithEventsGen &) = delete;
  /// deleted move constructor
  ModelWithEventsGen(ModelWithEventsGen &&) = delete;
  /// deleted copy assignment
  ModelWithEventsGen &operator=(const ModelWithEventsGen &) = delete;
  /// deleted move assignment
  ModelWithEventsGen &operator=(ModelWithEventsGen &&) = delete;

  /// Virtual destructor to release memory.
  ~ModelWithEventsGen() override = default;

  // ----------------------------------------------------------------------------------
  // -------------------------------- IComponent
  // ---------------------------------
  // ----------------------------------------------------------------------------------

  /// Publish fields, operations and properties of the model.
  /// @param receiver Publication receiver.
  void Publish(::Smp::IPublication *receiver) override;

  /// Request for configuration.
  /// @param logger Logger to use for log messages during Configure().
  /// @param linkRegistry Link Registry to use for registration of
  ///         links created during Configure() or later.
  void Configure(::Smp::Services::ILogger *logger,
                 ::Smp::Services::ILinkRegistry *linkRegistry) override;

  /// Connect model to simulator.
  /// @param simulator Simulation Environment that hosts the model.
  ///
  void Connect(::Smp::ISimulator *simulator) override;

  /// Disconnect model to simulator.
  /// @throws Smp::InvalidComponentState
  void Disconnect() override;

  /// Return the Universally Unique Identifier of the Model.
  /// @return Universally Unique Identifier of the Model.
  const Smp::Uuid &GetUuid() const override;

  ::Xsmp::EventSink<> void_esi;
  virtual void _void_esi(::Smp::IObject *sender) = 0;
  ::Xsmp::EventSink<::Smp::Bool> bool_esi;
  virtual void _bool_esi(::Smp::IObject *sender, ::Smp::Bool value) = 0;
  ::Xsmp::EventSink<::Smp::Char8> char8_esi;
  virtual void _char8_esi(::Smp::IObject *sender, ::Smp::Char8 value) = 0;
  ::Xsmp::EventSink<::Smp::DateTime> dateTime_esi;
  virtual void _dateTime_esi(::Smp::IObject *sender, ::Smp::DateTime value) = 0;
  ::Xsmp::EventSink<::Smp::Duration> duration_esi;
  virtual void _duration_esi(::Smp::IObject *sender, ::Smp::Duration value) = 0;
  ::Xsmp::EventSink<::Smp::Float32> float32_esi;
  virtual void _float32_esi(::Smp::IObject *sender, ::Smp::Float32 value) = 0;
  ::Xsmp::EventSink<::Smp::Float64> float64_esi;
  virtual void _float64_esi(::Smp::IObject *sender, ::Smp::Float64 value) = 0;
  ::Xsmp::EventSink<::Smp::Int16> int16_esi;
  virtual void _int16_esi(::Smp::IObject *sender, ::Smp::Int16 value) = 0;
  ::Xsmp::EventSink<::Smp::Int32> int32_esi;
  virtual void _int32_esi(::Smp::IObject *sender, ::Smp::Int32 value) = 0;
  ::Xsmp::EventSink<::Smp::Int64> int64_esi;
  virtual void _int64_esi(::Smp::IObject *sender, ::Smp::Int64 value) = 0;
  ::Xsmp::EventSink<::Smp::Int8> int8_esi;
  virtual void _int8_esi(::Smp::IObject *sender, ::Smp::Int8 value) = 0;
  ::Xsmp::EventSink<::Smp::String8> string8_esi;
  virtual void _string8_esi(::Smp::IObject *sender, ::Smp::String8 value) = 0;
  ::Xsmp::EventSink<::Smp::UInt16> uint16_esi;
  virtual void _uint16_esi(::Smp::IObject *sender, ::Smp::UInt16 value) = 0;
  ::Xsmp::EventSink<::Smp::UInt32> uint32_esi;
  virtual void _uint32_esi(::Smp::IObject *sender, ::Smp::UInt32 value) = 0;
  ::Xsmp::EventSink<::Smp::UInt64> uint64_esi;
  virtual void _uint64_esi(::Smp::IObject *sender, ::Smp::UInt64 value) = 0;
  ::Xsmp::EventSink<::Smp::UInt8> uint8_esi;
  virtual void _uint8_esi(::Smp::IObject *sender, ::Smp::UInt8 value) = 0;
  ::Xsmp::EventSource<> void_eso;
  ::Xsmp::EventSource<::Smp::Bool> bool_eso;
  ::Xsmp::EventSource<::Smp::Char8> char8_eso;
  ::Xsmp::EventSource<::Smp::DateTime> dateTime_eso;
  ::Xsmp::EventSource<::Smp::Duration> duration_eso;
  ::Xsmp::EventSource<::Smp::Float32> float32_eso;
  ::Xsmp::EventSource<::Smp::Float64> float64_eso;
  ::Xsmp::EventSource<::Smp::Int16> int16_eso;
  ::Xsmp::EventSource<::Smp::Int32> int32_eso;
  ::Xsmp::EventSource<::Smp::Int64> int64_eso;
  ::Xsmp::EventSource<::Smp::Int8> int8_eso;
  ::Xsmp::EventSource<::Smp::String8> string8_eso;
  ::Xsmp::EventSource<::Smp::UInt16> uint16_eso;
  ::Xsmp::EventSource<::Smp::UInt32> uint32_eso;
  ::Xsmp::EventSource<::Smp::UInt64> uint64_eso;
  ::Xsmp::EventSource<::Smp::UInt8> uint8_eso;
};
} // namespace Xsmp::Tests

#endif // XSMP_TESTS_MODELWITHEVENTSGEN_H_
