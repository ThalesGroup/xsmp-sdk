// Copyright 2023-2024 THALES ALENIA SPACE FRANCE. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------
// File Name    : ModelWithPropertiesGen.cpp
// Generated by : XsmpSdkGenerator-1.1.3
// -----------------------------------------------------------------------------
/// @file Xsmp/Tests/ModelWithPropertiesGen.cpp
// This file is auto-generated, Do not edit otherwise your changes will be lost

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include <Smp/IPublication.h>
#include <Xsmp/ComponentHelper.h>
#include <Xsmp/Request.h>
#include <Xsmp/Tests/ModelWithProperties.h>

namespace Xsmp::Tests {
//--------------------------- Constructor -------------------------
ModelWithPropertiesGen::ModelWithPropertiesGen(::Smp::String8 name,
                                               ::Smp::String8 description,
                                               ::Smp::IComposite *parent,
                                               ::Smp::ISimulator *simulator)
    : // Base class initialization
      ::Xsmp::Model(name, description, parent, simulator),
      // enum_field initialization
      enum_field{},
      // string_field initialization
      string_field{},
      // int_field initialization
      int_field{},
      // float_field initialization
      float_field{} {}

void ModelWithPropertiesGen::Publish(::Smp::IPublication *receiver) {
  // Call parent class implementation first
  ::Xsmp::Model::Publish(receiver);

  // Publish field enum_field
  receiver->PublishField("enum_field", "", &enum_field,
                         ::Xsmp::Tests::Types::Uuid_Enum1,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish field string_field
  receiver->PublishField("string_field", "", &string_field,
                         ::Xsmp::Tests::Types::Uuid_String1,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish field int_field
  receiver->PublishField("int_field", "", &int_field, ::Smp::ViewKind::VK_None,
                         true, false, false);
  // Publish field float_field
  receiver->PublishField("float_field", "", &float_field,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish Property enum_property
  receiver->PublishProperty(
      "enum_property", "", ::Xsmp::Tests::Types::Uuid_Enum1,
      ::Smp::AccessKind::AK_ReadWrite, ::Smp::ViewKind::VK_None);
  // Publish Property string_property
  receiver->PublishProperty(
      "string_property", "", ::Xsmp::Tests::Types::Uuid_String1,
      ::Smp::AccessKind::AK_ReadWrite, ::Smp::ViewKind::VK_None);
  // Publish Property int_property
  receiver->PublishProperty("int_property", "", ::Smp::Uuids::Uuid_Int32,
                            ::Smp::AccessKind::AK_ReadWrite,
                            ::Smp::ViewKind::VK_None);
  // Publish Property float_property
  receiver->PublishProperty("float_property", "", ::Smp::Uuids::Uuid_Float64,
                            ::Smp::AccessKind::AK_ReadWrite,
                            ::Smp::ViewKind::VK_None);
  // Publish Property readonly_enum_property
  receiver->PublishProperty(
      "readonly_enum_property", "", ::Xsmp::Tests::Types::Uuid_Enum1,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_string_property
  receiver->PublishProperty(
      "readonly_string_property", "", ::Xsmp::Tests::Types::Uuid_String1,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_int_property
  receiver->PublishProperty(
      "readonly_int_property", "", ::Smp::Uuids::Uuid_Int32,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_float_property
  receiver->PublishProperty(
      "readonly_float_property", "", ::Smp::Uuids::Uuid_Float64,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_enum_property
  receiver->PublishProperty(
      "writeonly_enum_property", "", ::Xsmp::Tests::Types::Uuid_Enum1,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_string_property
  receiver->PublishProperty(
      "writeonly_string_property", "", ::Xsmp::Tests::Types::Uuid_String1,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_int_property
  receiver->PublishProperty(
      "writeonly_int_property", "", ::Smp::Uuids::Uuid_Int32,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_float_property
  receiver->PublishProperty(
      "writeonly_float_property", "", ::Smp::Uuids::Uuid_Float64,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Publish field static_enum_field
  receiver->PublishField("static_enum_field", "", &static_enum_field,
                         ::Xsmp::Tests::Types::Uuid_Enum1,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish field static_string_field
  receiver->PublishField("static_string_field", "", &static_string_field,
                         ::Xsmp::Tests::Types::Uuid_String1,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish field static_int_field
  receiver->PublishField("static_int_field", "", &static_int_field,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish field static_float_field
  receiver->PublishField("static_float_field", "", &static_float_field,
                         ::Smp::ViewKind::VK_None, true, false, false);
  // Publish Property static_enum_property
  receiver->PublishProperty(
      "static_enum_property", "", ::Xsmp::Tests::Types::Uuid_Enum1,
      ::Smp::AccessKind::AK_ReadWrite, ::Smp::ViewKind::VK_None);
  // Publish Property static_string_property
  receiver->PublishProperty(
      "static_string_property", "", ::Xsmp::Tests::Types::Uuid_String1,
      ::Smp::AccessKind::AK_ReadWrite, ::Smp::ViewKind::VK_None);
  // Publish Property static_int_property
  receiver->PublishProperty("static_int_property", "", ::Smp::Uuids::Uuid_Int32,
                            ::Smp::AccessKind::AK_ReadWrite,
                            ::Smp::ViewKind::VK_None);
  // Publish Property static_float_property
  receiver->PublishProperty(
      "static_float_property", "", ::Smp::Uuids::Uuid_Float64,
      ::Smp::AccessKind::AK_ReadWrite, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_static_enum_property
  receiver->PublishProperty(
      "readonly_static_enum_property", "", ::Xsmp::Tests::Types::Uuid_Enum1,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_static_string_property
  receiver->PublishProperty(
      "readonly_static_string_property", "", ::Xsmp::Tests::Types::Uuid_String1,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_static_int_property
  receiver->PublishProperty(
      "readonly_static_int_property", "", ::Smp::Uuids::Uuid_Int32,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property readonly_static_float_property
  receiver->PublishProperty(
      "readonly_static_float_property", "", ::Smp::Uuids::Uuid_Float64,
      ::Smp::AccessKind::AK_ReadOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_static_enum_property
  receiver->PublishProperty(
      "writeonly_static_enum_property", "", ::Xsmp::Tests::Types::Uuid_Enum1,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_static_string_property
  receiver->PublishProperty("writeonly_static_string_property", "",
                            ::Xsmp::Tests::Types::Uuid_String1,
                            ::Smp::AccessKind::AK_WriteOnly,
                            ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_static_int_property
  receiver->PublishProperty(
      "writeonly_static_int_property", "", ::Smp::Uuids::Uuid_Int32,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Publish Property writeonly_static_float_property
  receiver->PublishProperty(
      "writeonly_static_float_property", "", ::Smp::Uuids::Uuid_Float64,
      ::Smp::AccessKind::AK_WriteOnly, ::Smp::ViewKind::VK_None);
  // Call user DoPublish if any
  ::Xsmp::Component::Helper::Publish<::Xsmp::Tests::ModelWithProperties>(
      this, receiver);
}

void ModelWithPropertiesGen::Configure(
    ::Smp::Services::ILogger *logger,
    ::Smp::Services::ILinkRegistry *linkRegistry) {
  // Call parent implementation first
  ::Xsmp::Model::Configure(logger, linkRegistry);

  // Call user DoConfigure if any
  ::Xsmp::Component::Helper::Configure<::Xsmp::Tests::ModelWithProperties>(
      this, logger, linkRegistry);
}

void ModelWithPropertiesGen::Connect(::Smp::ISimulator *simulator) {
  // Call parent implementation first
  ::Xsmp::Model::Connect(simulator);

  // Call user DoConnect if any
  ::Xsmp::Component::Helper::Connect<::Xsmp::Tests::ModelWithProperties>(
      this, simulator);
}

void ModelWithPropertiesGen::Disconnect() {
  // Call user DoDisconnect if any
  ::Xsmp::Component::Helper::Disconnect<::Xsmp::Tests::ModelWithProperties>(
      this);

  // Call parent implementation last, to remove references to the Simulator and
  // its services
  ::Xsmp::Model::Disconnect();
}

ModelWithPropertiesGen::RequestHandlers
    ModelWithPropertiesGen::requestHandlers = InitRequestHandlers();

ModelWithPropertiesGen::RequestHandlers
ModelWithPropertiesGen::InitRequestHandlers() {
  RequestHandlers handlers;
  if (handlers.find("get_enum_property") == handlers.end()) {
    handlers["get_enum_property"] = [](ModelWithPropertiesGen *component,
                                       ::Smp::IRequest *request) {
      /// Invoke get_enum_property
      ::Xsmp::Request::setReturnValue(request,
                                      ::Smp::PrimitiveTypeKind::PTK_Int32,
                                      component->get_enum_property());
    };
  }
  if (handlers.find("set_enum_property") == handlers.end()) {
    handlers["set_enum_property"] = [](ModelWithPropertiesGen *component,
                                       ::Smp::IRequest *request) {
      /// Invoke set_enum_property
      component->set_enum_property(
          ::Xsmp::Request::get<::Xsmp::Tests::Types::Enum1>(
              component, request, "enum_property",
              ::Smp::PrimitiveTypeKind::PTK_Int32));
    };
  }
  if (handlers.find("get_string_property") == handlers.end()) {
    handlers["get_string_property"] = [](ModelWithPropertiesGen *component,
                                         ::Smp::IRequest *request) {
      /// Invoke get_string_property
      ::Xsmp::Request::setReturnValue(request,
                                      ::Smp::PrimitiveTypeKind::PTK_String8,
                                      component->get_string_property());
    };
  }
  if (handlers.find("set_string_property") == handlers.end()) {
    handlers["set_string_property"] = [](ModelWithPropertiesGen *component,
                                         ::Smp::IRequest *request) {
      /// Invoke set_string_property
      component->set_string_property(
          ::Xsmp::Request::get<::Xsmp::Tests::Types::String1>(
              component, request, "string_property",
              ::Smp::PrimitiveTypeKind::PTK_String8));
    };
  }
  if (handlers.find("get_int_property") == handlers.end()) {
    handlers["get_int_property"] = [](ModelWithPropertiesGen *component,
                                      ::Smp::IRequest *request) {
      /// Invoke get_int_property
      ::Xsmp::Request::setReturnValue(request,
                                      ::Smp::PrimitiveTypeKind::PTK_Int32,
                                      component->get_int_property());
    };
  }
  if (handlers.find("set_int_property") == handlers.end()) {
    handlers["set_int_property"] = [](ModelWithPropertiesGen *component,
                                      ::Smp::IRequest *request) {
      /// Invoke set_int_property
      component->set_int_property(::Xsmp::Request::get<::Smp::Int32>(
          component, request, "int_property",
          ::Smp::PrimitiveTypeKind::PTK_Int32));
    };
  }
  if (handlers.find("get_float_property") == handlers.end()) {
    handlers["get_float_property"] = [](ModelWithPropertiesGen *component,
                                        ::Smp::IRequest *request) {
      /// Invoke get_float_property
      ::Xsmp::Request::setReturnValue(request,
                                      ::Smp::PrimitiveTypeKind::PTK_Float64,
                                      component->get_float_property());
    };
  }
  if (handlers.find("set_float_property") == handlers.end()) {
    handlers["set_float_property"] = [](ModelWithPropertiesGen *component,
                                        ::Smp::IRequest *request) {
      /// Invoke set_float_property
      component->set_float_property(::Xsmp::Request::get<::Smp::Float64>(
          component, request, "float_property",
          ::Smp::PrimitiveTypeKind::PTK_Float64));
    };
  }
  if (handlers.find("get_readonly_enum_property") == handlers.end()) {
    handlers["get_readonly_enum_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_enum_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Int32,
              component->get_readonly_enum_property());
        };
  }
  if (handlers.find("get_readonly_string_property") == handlers.end()) {
    handlers["get_readonly_string_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_string_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_String8,
              component->get_readonly_string_property());
        };
  }
  if (handlers.find("get_readonly_int_property") == handlers.end()) {
    handlers["get_readonly_int_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_int_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Int32,
              component->get_readonly_int_property());
        };
  }
  if (handlers.find("get_readonly_float_property") == handlers.end()) {
    handlers["get_readonly_float_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_float_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Float64,
              component->get_readonly_float_property());
        };
  }
  if (handlers.find("set_writeonly_enum_property") == handlers.end()) {
    handlers["set_writeonly_enum_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_enum_property
          component->set_writeonly_enum_property(
              ::Xsmp::Request::get<::Xsmp::Tests::Types::Enum1>(
                  component, request, "writeonly_enum_property",
                  ::Smp::PrimitiveTypeKind::PTK_Int32));
        };
  }
  if (handlers.find("set_writeonly_string_property") == handlers.end()) {
    handlers["set_writeonly_string_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_string_property
          component->set_writeonly_string_property(
              ::Xsmp::Request::get<::Xsmp::Tests::Types::String1>(
                  component, request, "writeonly_string_property",
                  ::Smp::PrimitiveTypeKind::PTK_String8));
        };
  }
  if (handlers.find("set_writeonly_int_property") == handlers.end()) {
    handlers["set_writeonly_int_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_int_property
          component->set_writeonly_int_property(
              ::Xsmp::Request::get<::Smp::Int32>(
                  component, request, "writeonly_int_property",
                  ::Smp::PrimitiveTypeKind::PTK_Int32));
        };
  }
  if (handlers.find("set_writeonly_float_property") == handlers.end()) {
    handlers["set_writeonly_float_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_float_property
          component->set_writeonly_float_property(
              ::Xsmp::Request::get<::Smp::Float64>(
                  component, request, "writeonly_float_property",
                  ::Smp::PrimitiveTypeKind::PTK_Float64));
        };
  }
  if (handlers.find("get_static_enum_property") == handlers.end()) {
    handlers["get_static_enum_property"] = [](ModelWithPropertiesGen *component,
                                              ::Smp::IRequest *request) {
      /// Invoke get_static_enum_property
      ::Xsmp::Request::setReturnValue(request,
                                      ::Smp::PrimitiveTypeKind::PTK_Int32,
                                      component->get_static_enum_property());
    };
  }
  if (handlers.find("set_static_enum_property") == handlers.end()) {
    handlers["set_static_enum_property"] = [](ModelWithPropertiesGen *component,
                                              ::Smp::IRequest *request) {
      /// Invoke set_static_enum_property
      component->set_static_enum_property(
          ::Xsmp::Request::get<::Xsmp::Tests::Types::Enum1>(
              component, request, "static_enum_property",
              ::Smp::PrimitiveTypeKind::PTK_Int32));
    };
  }
  if (handlers.find("get_static_string_property") == handlers.end()) {
    handlers["get_static_string_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_static_string_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_String8,
              component->get_static_string_property());
        };
  }
  if (handlers.find("set_static_string_property") == handlers.end()) {
    handlers["set_static_string_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_static_string_property
          component->set_static_string_property(
              ::Xsmp::Request::get<::Xsmp::Tests::Types::String1>(
                  component, request, "static_string_property",
                  ::Smp::PrimitiveTypeKind::PTK_String8));
        };
  }
  if (handlers.find("get_static_int_property") == handlers.end()) {
    handlers["get_static_int_property"] = [](ModelWithPropertiesGen *component,
                                             ::Smp::IRequest *request) {
      /// Invoke get_static_int_property
      ::Xsmp::Request::setReturnValue(request,
                                      ::Smp::PrimitiveTypeKind::PTK_Int32,
                                      component->get_static_int_property());
    };
  }
  if (handlers.find("set_static_int_property") == handlers.end()) {
    handlers["set_static_int_property"] = [](ModelWithPropertiesGen *component,
                                             ::Smp::IRequest *request) {
      /// Invoke set_static_int_property
      component->set_static_int_property(::Xsmp::Request::get<::Smp::Int32>(
          component, request, "static_int_property",
          ::Smp::PrimitiveTypeKind::PTK_Int32));
    };
  }
  if (handlers.find("get_static_float_property") == handlers.end()) {
    handlers["get_static_float_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_static_float_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Float64,
              component->get_static_float_property());
        };
  }
  if (handlers.find("set_static_float_property") == handlers.end()) {
    handlers["set_static_float_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_static_float_property
          component->set_static_float_property(
              ::Xsmp::Request::get<::Smp::Float64>(
                  component, request, "static_float_property",
                  ::Smp::PrimitiveTypeKind::PTK_Float64));
        };
  }
  if (handlers.find("get_readonly_static_enum_property") == handlers.end()) {
    handlers["get_readonly_static_enum_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_static_enum_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Int32,
              component->get_readonly_static_enum_property());
        };
  }
  if (handlers.find("get_readonly_static_string_property") == handlers.end()) {
    handlers["get_readonly_static_string_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_static_string_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_String8,
              component->get_readonly_static_string_property());
        };
  }
  if (handlers.find("get_readonly_static_int_property") == handlers.end()) {
    handlers["get_readonly_static_int_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_static_int_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Int32,
              component->get_readonly_static_int_property());
        };
  }
  if (handlers.find("get_readonly_static_float_property") == handlers.end()) {
    handlers["get_readonly_static_float_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke get_readonly_static_float_property
          ::Xsmp::Request::setReturnValue(
              request, ::Smp::PrimitiveTypeKind::PTK_Float64,
              component->get_readonly_static_float_property());
        };
  }
  if (handlers.find("set_writeonly_static_enum_property") == handlers.end()) {
    handlers["set_writeonly_static_enum_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_static_enum_property
          component->set_writeonly_static_enum_property(
              ::Xsmp::Request::get<::Xsmp::Tests::Types::Enum1>(
                  component, request, "writeonly_static_enum_property",
                  ::Smp::PrimitiveTypeKind::PTK_Int32));
        };
  }
  if (handlers.find("set_writeonly_static_string_property") == handlers.end()) {
    handlers["set_writeonly_static_string_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_static_string_property
          component->set_writeonly_static_string_property(
              ::Xsmp::Request::get<::Xsmp::Tests::Types::String1>(
                  component, request, "writeonly_static_string_property",
                  ::Smp::PrimitiveTypeKind::PTK_String8));
        };
  }
  if (handlers.find("set_writeonly_static_int_property") == handlers.end()) {
    handlers["set_writeonly_static_int_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_static_int_property
          component->set_writeonly_static_int_property(
              ::Xsmp::Request::get<::Smp::Int32>(
                  component, request, "writeonly_static_int_property",
                  ::Smp::PrimitiveTypeKind::PTK_Int32));
        };
  }
  if (handlers.find("set_writeonly_static_float_property") == handlers.end()) {
    handlers["set_writeonly_static_float_property"] =
        [](ModelWithPropertiesGen *component, ::Smp::IRequest *request) {
          /// Invoke set_writeonly_static_float_property
          component->set_writeonly_static_float_property(
              ::Xsmp::Request::get<::Smp::Float64>(
                  component, request, "writeonly_static_float_property",
                  ::Smp::PrimitiveTypeKind::PTK_Float64));
        };
  }
  return handlers;
}

void ModelWithPropertiesGen::Invoke(::Smp::IRequest *request) {
  if (request == nullptr) {
    return;
  }
  auto handler = requestHandlers.find(request->GetOperationName());
  if (handler != requestHandlers.end()) {
    handler->second(this, request);
  } else {
    // pass the request down to the base model
    ::Xsmp::Model::Invoke(request);
  }
}

const Smp::Uuid &ModelWithPropertiesGen::GetUuid() const {
  return Uuid_ModelWithProperties;
}
::Xsmp::Tests::Types::Enum1 ModelWithPropertiesGen::get_enum_property() {
  return this->enum_field;
}
void ModelWithPropertiesGen::set_enum_property(
    ::Xsmp::Tests::Types::Enum1 value) {
  this->enum_field = value;
}
::Xsmp::Tests::Types::String1 ModelWithPropertiesGen::get_string_property() {
  return this->string_field;
}
void ModelWithPropertiesGen::set_string_property(
    ::Xsmp::Tests::Types::String1 value) {
  this->string_field = value;
}
::Smp::Int32 ModelWithPropertiesGen::get_int_property() {
  return this->int_field;
}
void ModelWithPropertiesGen::set_int_property(::Smp::Int32 value) {
  this->int_field = value;
}
::Smp::Float64 ModelWithPropertiesGen::get_float_property() {
  return this->float_field;
}
void ModelWithPropertiesGen::set_float_property(::Smp::Float64 value) {
  this->float_field = value;
}
::Xsmp::Tests::Types::Enum1
ModelWithPropertiesGen::get_readonly_enum_property() {
  return this->enum_field;
}
::Xsmp::Tests::Types::String1
ModelWithPropertiesGen::get_readonly_string_property() {
  return this->string_field;
}
::Smp::Int32 ModelWithPropertiesGen::get_readonly_int_property() {
  return this->int_field;
}
::Smp::Float64 ModelWithPropertiesGen::get_readonly_float_property() {
  return this->float_field;
}
void ModelWithPropertiesGen::set_writeonly_enum_property(
    ::Xsmp::Tests::Types::Enum1 value) {
  this->enum_field = value;
}
void ModelWithPropertiesGen::set_writeonly_string_property(
    ::Xsmp::Tests::Types::String1 value) {
  this->string_field = value;
}
void ModelWithPropertiesGen::set_writeonly_int_property(::Smp::Int32 value) {
  this->int_field = value;
}
void ModelWithPropertiesGen::set_writeonly_float_property(
    ::Smp::Float64 value) {
  this->float_field = value;
}
// static_enum_field initialization
::Xsmp::Tests::Types::Enum1 ModelWithPropertiesGen::static_enum_field{};
// static_string_field initialization
::Xsmp::Tests::Types::String1 ModelWithPropertiesGen::static_string_field{};
// static_int_field initialization
::Smp::Int32 ModelWithPropertiesGen::static_int_field{};
// static_float_field initialization
::Smp::Float64 ModelWithPropertiesGen::static_float_field{};
::Xsmp::Tests::Types::Enum1 ModelWithPropertiesGen::get_static_enum_property() {
  return ModelWithPropertiesGen::static_enum_field;
}
void ModelWithPropertiesGen::set_static_enum_property(
    ::Xsmp::Tests::Types::Enum1 value) {
  ModelWithPropertiesGen::static_enum_field = value;
}
::Xsmp::Tests::Types::String1
ModelWithPropertiesGen::get_static_string_property() {
  return ModelWithPropertiesGen::static_string_field;
}
void ModelWithPropertiesGen::set_static_string_property(
    ::Xsmp::Tests::Types::String1 value) {
  ModelWithPropertiesGen::static_string_field = value;
}
::Smp::Int32 ModelWithPropertiesGen::get_static_int_property() {
  return ModelWithPropertiesGen::static_int_field;
}
void ModelWithPropertiesGen::set_static_int_property(::Smp::Int32 value) {
  ModelWithPropertiesGen::static_int_field = value;
}
::Smp::Float64 ModelWithPropertiesGen::get_static_float_property() {
  return ModelWithPropertiesGen::static_float_field;
}
void ModelWithPropertiesGen::set_static_float_property(::Smp::Float64 value) {
  ModelWithPropertiesGen::static_float_field = value;
}
::Xsmp::Tests::Types::Enum1
ModelWithPropertiesGen::get_readonly_static_enum_property() {
  return ModelWithPropertiesGen::static_enum_field;
}
::Xsmp::Tests::Types::String1
ModelWithPropertiesGen::get_readonly_static_string_property() {
  return ModelWithPropertiesGen::static_string_field;
}
::Smp::Int32 ModelWithPropertiesGen::get_readonly_static_int_property() {
  return ModelWithPropertiesGen::static_int_field;
}
::Smp::Float64 ModelWithPropertiesGen::get_readonly_static_float_property() {
  return ModelWithPropertiesGen::static_float_field;
}
void ModelWithPropertiesGen::set_writeonly_static_enum_property(
    ::Xsmp::Tests::Types::Enum1 value) {
  ModelWithPropertiesGen::static_enum_field = value;
}
void ModelWithPropertiesGen::set_writeonly_static_string_property(
    ::Xsmp::Tests::Types::String1 value) {
  ModelWithPropertiesGen::static_string_field = value;
}
void ModelWithPropertiesGen::set_writeonly_static_int_property(
    ::Smp::Int32 value) {
  ModelWithPropertiesGen::static_int_field = value;
}
void ModelWithPropertiesGen::set_writeonly_static_float_property(
    ::Smp::Float64 value) {
  ModelWithPropertiesGen::static_float_field = value;
}
} // namespace Xsmp::Tests
