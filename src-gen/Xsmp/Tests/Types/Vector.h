// Copyright 2023-2024 THALES ALENIA SPACE FRANCE. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------
// File Name    : Vector.h
// Generated by : XsmpSdkGenerator-1.1.0
// -----------------------------------------------------------------------------
/// @file Xsmp/Tests/Types/Vector.h
// This file is auto-generated, Do not edit otherwise your changes will be lost

#ifndef XSMP_TESTS_TYPES_VECTOR_H_
#define XSMP_TESTS_TYPES_VECTOR_H_

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include <Smp/PrimitiveTypes.h>
#include <Smp/Publication/ITypeRegistry.h>

// ----------------------------------------------------------------------------
// ------------------------ Types and Interfaces ------------------------
// ----------------------------------------------------------------------------

namespace Xsmp::Tests::Types {
struct Vector {
  ::Smp::Float64 x;
  ::Smp::Float64 y;
  ::Smp::Float64 z;

  static void _Register(::Smp::Publication::ITypeRegistry *registry);

  template <typename _BASE> struct _Field : public _BASE {
    // constructor
    // template<typename ..._Args>
    _Field(::Smp::Publication::ITypeRegistry *typeRegistry,
           ::Smp::Uuid typeUuid, ::Smp::String8 name,
           ::Smp::String8 description = "", ::Smp::IObject *parent = nullptr,
           ::Smp::ViewKind view = ::Smp::ViewKind::VK_None,
           const ::Xsmp::Tests::Types::Vector &value = {})
        : _BASE(typeRegistry, typeUuid, name, description, parent, view),
          /// x initialization
          x{typeRegistry, ::Smp::Uuids::Uuid_Float64, "x", "", this, view,
            value.x},
          /// y initialization
          y{typeRegistry, ::Smp::Uuids::Uuid_Float64, "y", "", this, view,
            value.y},
          /// z initialization
          z{typeRegistry, ::Smp::Uuids::Uuid_Float64, "z", "", this, view,
            value.z} {}
    _Field(const _Field &) = delete;
    _Field &operator=(const _Field &) = delete;

    // copy operator from ::Xsmp::Tests::Types::Vector
    _Field &operator=(const ::Xsmp::Tests::Types::Vector &other) {
      this->x = other.x;
      this->y = other.y;
      this->z = other.z;
      return *this;
    }

    // convert to ::Xsmp::Tests::Types::Vector
    operator ::Xsmp::Tests::Types::Vector() const noexcept { return {x, y, z}; }

    // Fields declaration
    typename _BASE::template Field<::Smp::Float64> x;
    typename _BASE::template Field<::Smp::Float64> y;
    typename _BASE::template Field<::Smp::Float64> z;
  };
};

/// Universally unique identifier of type Vector.
static constexpr ::Smp::Uuid Uuid_Vector{0x8287dc95U, 0x211dU, 0x49d7U, 0x8b32U,
                                         0x863832fb88c2U};
} // namespace Xsmp::Tests::Types

#endif // XSMP_TESTS_TYPES_VECTOR_H_
