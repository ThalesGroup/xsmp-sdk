// Copyright 2023-2024 THALES ALENIA SPACE FRANCE. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------
// File Name    : ModelWithSimpleFieldsGen.h
// Generated by : XsmpSdkGenerator-1.1.3
// -----------------------------------------------------------------------------
/// @file Xsmp/Tests/ModelWithSimpleFieldsGen.h
// This file is auto-generated, Do not edit otherwise your changes will be lost

#ifndef XSMP_TESTS_MODELWITHSIMPLEFIELDSGEN_H_
#define XSMP_TESTS_MODELWITHSIMPLEFIELDSGEN_H_

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include <Smp/IModel.h>
#include <Smp/ISimulator.h>
#include <Smp/PrimitiveTypes.h>
#include <Smp/Publication/ITypeRegistry.h>
#include <Xsmp/Composite.h>
#include <Xsmp/Container.h>
#include <Xsmp/EventConsumer.h>
#include <Xsmp/EventProvider.h>
#include <Xsmp/EventSink.h>
#include <Xsmp/EventSource.h>
#include <Xsmp/FallibleModel.h>
#include <Xsmp/Field.h>
#include <Xsmp/Model.h>
#include <Xsmp/Tests/Types/Enum1.h>
#include <Xsmp/Tests/Types/Float1.h>
#include <Xsmp/Tests/Types/Integer1.h>
#include <Xsmp/Tests/Types/SimpleStructure.h>
#include <Xsmp/Tests/Types/String1.h>
#include <type_traits>

// ----------------------------------------------------------------------------
// ------------------------ Types and Interfaces ------------------------
// ----------------------------------------------------------------------------

namespace Xsmp::Tests {
// forward declaration of user class
class ModelWithSimpleFields;
/// Universally unique identifier of type ModelWithSimpleFields.
inline constexpr ::Smp::Uuid Uuid_ModelWithSimpleFields{
    0xdf6ddf61U, 0xc676U, 0x47f5U, 0x8764U, 0xfc6d889318ffU};

class ModelWithSimpleFieldsGen : public ::Xsmp::Model,
                                 public virtual ::Xsmp::Composite,
                                 public virtual ::Xsmp::EventProvider,
                                 public virtual ::Xsmp::EventConsumer,
                                 public virtual ::Xsmp::FallibleModel {

  friend class ::Xsmp::Tests::ModelWithSimpleFields;

public:
  // ------------------------------------------------------------------------------------
  // -------------------------- Constructors/Destructor
  // --------------------------
  // ------------------------------------------------------------------------------------

  /// Constructor setting name, description, parent and simulator.
  /// @param name Name of new model instance.
  /// @param description Description of new model instance.
  /// @param parent Parent of new model instance.
  /// @param simulator The simulator instance.
  ModelWithSimpleFieldsGen(::Smp::String8 name, ::Smp::String8 description,
                           ::Smp::IComposite *parent,
                           ::Smp::ISimulator *simulator);
  /// deleted copy constructor
  ModelWithSimpleFieldsGen(const ModelWithSimpleFieldsGen &) = delete;
  /// deleted move constructor
  ModelWithSimpleFieldsGen(ModelWithSimpleFieldsGen &&) = delete;
  /// deleted copy assignment
  ModelWithSimpleFieldsGen &
  operator=(const ModelWithSimpleFieldsGen &) = delete;
  /// deleted move assignment
  ModelWithSimpleFieldsGen &operator=(ModelWithSimpleFieldsGen &&) = delete;

  /// Virtual destructor to release memory.
  ~ModelWithSimpleFieldsGen() override = default;

  // ----------------------------------------------------------------------------------
  // -------------------------------- IComponent
  // ---------------------------------
  // ----------------------------------------------------------------------------------

  /// Publish fields, operations and properties of the model.
  /// @param receiver Publication receiver.
  void Publish(::Smp::IPublication *receiver) override;

  /// Request for configuration.
  /// @param logger Logger to use for log messages during Configure().
  /// @param linkRegistry Link Registry to use for registration of
  ///         links created during Configure() or later.
  void Configure(::Smp::Services::ILogger *logger,
                 ::Smp::Services::ILinkRegistry *linkRegistry) override;

  /// Connect model to simulator.
  /// @param simulator Simulation Environment that hosts the model.
  ///
  void Connect(::Smp::ISimulator *simulator) override;

  /// Disconnect model to simulator.
  /// @throws Smp::InvalidComponentState
  void Disconnect() override;

  /// Return the Universally Unique Identifier of the Model.
  /// @return Universally Unique Identifier of the Model.
  const Smp::Uuid &GetUuid() const override;

  ::Xsmp::EventSink<> esi;
  virtual void _esi(::Smp::IObject *sender) = 0;
  ::Xsmp::EventSource<> eso;

private:
  ::Smp::Bool boolean;
  ::Smp::Char8 char8;
  ::Xsmp::Tests::Types::Enum1 enum1;
  ::Xsmp::Tests::Types::String1 string1;
  ::Xsmp::Tests::Types::Float1 float1;
  ::Xsmp::Tests::Types::Integer1 integer1;
  ::Xsmp::Tests::Types::SimpleStructure struct1;
  ::Smp::Bool booleanInput;
  ::Smp::Char8 char8Input;
  ::Xsmp::Tests::Types::Enum1 enum1Input;
  ::Xsmp::Tests::Types::String1 string1Input;
  ::Xsmp::Tests::Types::Float1 float1Input;
  ::Xsmp::Tests::Types::Integer1 integer1Input;
  ::Xsmp::Tests::Types::SimpleStructure struct1Input;
  ::Smp::Bool booleanTransient;
  ::Smp::Char8 char8Transient;
  ::Xsmp::Tests::Types::Enum1 enum1Transient;
  ::Xsmp::Tests::Types::String1 string1Transient;
  ::Xsmp::Tests::Types::Float1 float1Transient;
  ::Xsmp::Tests::Types::Integer1 integer1Transient;
  ::Xsmp::Tests::Types::SimpleStructure struct1Transient;
  ::Xsmp::Field<::Smp::Bool>::output booleanOutput;
  ::Xsmp::Field<::Smp::Char8>::output char8Output;
  ::Xsmp::Field<::Xsmp::Tests::Types::Enum1>::output enum1Output;
  ::Xsmp::Field<::Xsmp::Tests::Types::String1>::output string1Output;
  ::Xsmp::Field<::Xsmp::Tests::Types::Float1>::output float1Output;
  ::Xsmp::Field<::Xsmp::Tests::Types::Integer1>::output integer1Output;
  ::Xsmp::Field<::Xsmp::Tests::Types::SimpleStructure>::output struct1Output;
  ::Xsmp::Field<::Smp::Bool>::forcible booleanForcible;
  ::Xsmp::Field<::Smp::Char8>::forcible char8Forcible;
  ::Xsmp::Field<::Xsmp::Tests::Types::Enum1>::forcible enum1Forcible;
  ::Xsmp::Field<::Xsmp::Tests::Types::String1>::forcible string1Forcible;
  ::Xsmp::Field<::Xsmp::Tests::Types::Float1>::forcible float1Forcible;
  ::Xsmp::Field<::Xsmp::Tests::Types::Integer1>::forcible integer1Forcible;
  ::Xsmp::Field<::Xsmp::Tests::Types::SimpleStructure>::forcible
      struct1Forcible;
  ::Xsmp::Field<::Smp::Bool>::failure booleanFailure;
  ::Xsmp::Field<::Smp::Char8>::failure char8Failure;
  ::Xsmp::Field<::Xsmp::Tests::Types::Enum1>::failure enum1Failure;
  ::Xsmp::Field<::Xsmp::Tests::Types::String1>::failure string1Failure;
  ::Xsmp::Field<::Xsmp::Tests::Types::Float1>::failure float1Failure;
  ::Xsmp::Field<::Xsmp::Tests::Types::Integer1>::failure integer1Failure;
  ::Xsmp::Field<::Smp::Bool>::transient::input::output::forcible::failure
      booleanAll;
  ::Xsmp::Field<::Smp::Char8>::transient::input::output::forcible::failure
      char8All;
  ::Xsmp::Field<::Xsmp::Tests::Types::Enum1>::transient::input::output::
      forcible::failure enum1All;
  ::Xsmp::Field<::Xsmp::Tests::Types::String1>::transient::input::output::
      forcible::failure string1All;
  ::Xsmp::Field<::Xsmp::Tests::Types::Float1>::transient::input::output::
      forcible::failure float1All;
  ::Xsmp::Field<::Xsmp::Tests::Types::Integer1>::transient::input::output::
      forcible::failure integer1All;

public:
  ::Xsmp::Container<::Smp::IModel> subModels;
};
} // namespace Xsmp::Tests

#endif // XSMP_TESTS_MODELWITHSIMPLEFIELDSGEN_H_
