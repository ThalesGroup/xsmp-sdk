
if (CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    set(ENV_LIB_PATH "PATH")
    set(ENV_SEPARATOR ";")
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL Darwin)
    set(ENV_LIB_PATH "DYLD_LIBRARY_PATH")
    set(ENV_SEPARATOR ":")
else()
    set(ENV_LIB_PATH "LD_LIBRARY_PATH")
    set(ENV_SEPARATOR ":")
endif()
set(ENV_PATH "PATH")
set(ENV_PYTHON_PATH "PYTHONPATH")

function(generic_path_append variable path)
    get_filename_component(path "${path}" ABSOLUTE)
    file(TO_NATIVE_PATH "${path}" path)
    if(DEFINED ENV{${variable}})
        set(ENV{${variable}} "$ENV{${variable}}${ENV_SEPARATOR}${path}")
    else()
        set(ENV{${variable}} "${path}")
    endif()
endfunction(generic_path_append)

function(generic_path_prepend variable path)
    get_filename_component(path "${path}" ABSOLUTE)
    file(TO_NATIVE_PATH "${path}" path)
    if(DEFINED ENV{${variable}})
        set(ENV{${variable}} "${path}${ENV_SEPARATOR}$ENV{${variable}}")
    else()
        set(ENV{${variable}} "${path}")
    endif()
endfunction(generic_path_prepend)


function(python_path_append path)
    generic_path_append(${ENV_PYTHON_PATH} ${path})
endfunction(python_path_append)

function(python_path_prepend path)
    generic_path_prepend(${ENV_PYTHON_PATH} ${path})
endfunction(python_path_prepend)

function(path_append path)
    generic_path_append(${ENV_PATH} ${path})
endfunction(path_append)

function(path_prepend path)
    generic_path_prepend(${ENV_PATH} ${path})
endfunction(path_prepend)

function(library_path_append path)
    generic_path_append(${ENV_LIB_PATH} ${path})
endfunction(library_path_append)

function(library_path_prepend path)
    generic_path_prepend(${ENV_LIB_PATH} ${path})
endfunction(library_path_prepend)
